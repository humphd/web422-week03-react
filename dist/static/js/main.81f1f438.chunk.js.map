{"version":3,"sources":["users.js","Avatar.js","UserInfo.js","ProfileCard.js","Profiles.js","PagingButton.js","App.js","index.js"],"names":["apiUrl","load","page","url","fetch","then","res","ok","Error","status","json","catch","err","console","warn","total","data","Avatar","imgUrl","name","src","alt","title","className","width","height","UserInfo","email","href","ProfileCard","user","id","first_name","last_name","avatarUrl","avatar","Profiles","users","map","PagingButton","current","onPageChange","label","onClick","App","useState","totalPages","setTotalPages","currentPage","setCurrentPage","setUsers","useEffect","loadUsers","result","total_pages","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAAMA,G,MAAS,yBA0BAC,MAvBf,WAAyB,IAAXC,EAAU,uDAAH,EACbC,EAAG,UAAMH,EAAN,uBAA2BE,GAEpC,OAAOE,MAAMD,GACVE,MAAK,SAACC,GACL,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAJ,mCAAsCF,EAAIG,SAGlD,OAAOH,EAAII,UAEZC,OAAM,SAACC,GAIN,OAHAC,QAAQC,KAAKF,GAGN,CACLV,KAAM,EACNa,MAAO,EACPC,KAAM,Q,YCbCC,MANf,YAAiC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACvB,OACE,qBAAKC,IAAKF,EAAQG,IAAKF,EAAMG,MAAOH,EAAMI,UAAU,iBAAiBC,MAAM,MAAMC,OAAO,S,MCU7EC,MAZf,YAAkC,IAAfP,EAAc,EAAdA,KAAMQ,EAAQ,EAARA,MACvB,OACE,sBAAKJ,UAAU,YAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAE9B,oBAAII,UAAU,gBAAd,SACE,mBAAGK,KAAI,iBAAYD,GAAnB,SAA6BR,UCWtBU,MAdf,YAAgC,IAATC,EAAQ,EAARA,KACfC,EAAKD,EAAKC,GACVJ,EAAQG,EAAKH,MACbR,EAAI,UAAMW,EAAKE,WAAX,YAAyBF,EAAKG,WAClCC,EAAYJ,EAAKK,OAEvB,OACE,0BAASJ,GAAE,eAAUA,GAAMR,UAAU,eAArC,UACE,cAAC,EAAD,CAAQL,OAAQgB,EAAWf,KAAMA,IACjC,cAAC,EAAD,CAAUA,KAAMA,EAAMQ,MAAOA,QCLpBS,MAPf,YAIE,OAJ2B,EAATC,MAILC,KAAI,SAACR,GAAD,OAAU,cAAC,EAAD,CAA2BA,KAAMA,GAAfA,EAAKC,Q,MC6BrCQ,MA5Bf,YAAyD,IAAjCC,EAAgC,EAAhCA,QAASzB,EAAuB,EAAvBA,MAAO0B,EAAgB,EAAhBA,aAmBhCC,EAAQF,IAAYzB,EAAQ,WAAa,OAE/C,OACE,wBAAQQ,UAAU,gBAAgBoB,QAnBb,WAWrBF,EARID,IAAYzB,EACJyB,EAAU,EAEVA,EAAU,IAatB,SACGE,KC0BQE,MAhDf,WAAe,MAIuBC,mBAAS,GAJhC,mBAINC,EAJM,KAIMC,EAJN,OAKyBF,mBAAS,GALlC,mBAKNG,EALM,KAKOC,EALP,OAMaJ,mBAAS,IANtB,mBAMNR,EANM,KAMCa,EAND,KAiCb,OAnBAC,qBAAU,WACRC,EAAUJ,GAAa3C,MAAK,SAACgD,GAC3BN,EAAcM,EAAOC,aACrBL,EAAeI,EAAOnD,MACtBgD,EAASG,EAAOrC,WAEjB,CAACgC,IAcF,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,CACEiB,QAASQ,EACTjC,MAAO+B,EACPL,aAVmB,SAACvC,GAAD,OAAU+C,EAAe/C,MAa9C,sBAAMqB,UAAU,gBAAhB,SACE,cAAC,EAAD,CAAUc,MAAOA,UC3CzBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.81f1f438.chunk.js","sourcesContent":["const apiUrl = \"https://reqres.in/api\";\n\n// Set a default page number of 1, in case the caller doesn't pass us one.\nfunction load(page = 1) {\n  const url = `${apiUrl}/users?page=${page}`;\n\n  return fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw new Error(`API returned status code ${res.status}`);\n      }\n\n      return res.json();\n    })\n    .catch((err) => {\n      console.warn(err);\n\n      // We have no users to process, return an default object\n      return {\n        page: 1,\n        total: 1,\n        data: [],\n      };\n    });\n}\n\nexport default load;\n","import './Avatar.css';\n\nfunction Avatar({imgUrl, name}) {\n  return (\n    <img src={imgUrl} alt={name} title={name} className=\"profile-avatar\" width=\"128\" height=\"128\" />\n  );\n}\n\nexport default Avatar;\n","import './UserInfo.css';\n\nfunction UserInfo({name, email}) {\n  return (\n    <div className=\"user-info\">\n      <h2 className=\"profile-name\">{name}</h2>\n\n      <h3 className=\"profile-email\">\n        <a href={`mailto:${email}`}>{name}</a>\n      </h3>\n    </div>\n  );\n}\n\nexport default UserInfo;\n","import './ProfileCard.css';\n\nimport Avatar from './Avatar';\nimport UserInfo from './UserInfo';\n\nfunction ProfileCard({ user }) {\n  const id = user.id;\n  const email = user.email;\n  const name = `${user.first_name} ${user.last_name}`;\n  const avatarUrl = user.avatar;\n\n  return (\n    <section id={`user-${id}`} className=\"profile-card\">\n      <Avatar imgUrl={avatarUrl} name={name} />\n      <UserInfo name={name} email={email} />\n    </section>\n  )\n}\n\nexport default ProfileCard;\n","import ProfileCard from \"./ProfileCard\";\n\nfunction Profiles({ users }) {\n  // We need to provide a unique way to identify React Elements in a list\n  // so that React can map the data items in users to <ProfileCard> elements.\n  // We'll use the user's id, which is a perfect fit for this case.\n  return users.map((user) => <ProfileCard key={user.id} user={user} />);\n}\n\nexport default Profiles;\n","import \"./PagingButton.css\";\n\n// Our PagingButton receives props like other components, but one\n// of those is different than we've seen before: onPageChange is\n// a reference to a function that is passed down from the parent.\n// The PagingButton doesn't know or care what it does: it will\n// simply call it at the right time.\nfunction PagingButton({ current, total, onPageChange }) {\n  // When the button is clicked, figure out which page we need,\n  // and call the onPageChange function we were passed on props.\n  const onClickHandler = () => {\n    let newPage;\n\n    if (current === total) {\n      newPage = current - 1;\n    } else {\n      newPage = current + 1;\n    }\n\n    // The page has been updated, so let the parent know by calling\n    // it's provided function, passing the new page as an argument.\n    onPageChange(newPage);\n  };\n\n  // Figure out which label to use for the button, based on the\n  // current page number and total number of pages.\n  const label = current === total ? \"Previous\" : \"Next\";\n\n  return (\n    <button className=\"paging-button\" onClick={onClickHandler}>\n      {label}\n    </button>\n  );\n}\n\nexport default PagingButton;\n","// We'll use two of React's built-in Hook functions\nimport { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport loadUsers from \"./users\";\nimport Profiles from \"./Profiles\";\nimport PagingButton from \"./PagingButton\";\n\nfunction App() {\n  // We'll manage some state in our App component.  We set some initial, default\n  // state, but after the first run, the values we get will be whatever was\n  // stored using the set*() function below.\n  const [totalPages, setTotalPages] = useState(1);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [users, setUsers] = useState([]);\n\n  // Create a side effect, such that we load the current page of\n  // user profile data.  It's dependent on the current page number,\n  // so if that changes, we'll re-run this effect.  If it doesn't,\n  // we don't need to do anything. When the load Promise finishes,\n  // we'll update our state with new values, and this will trigger\n  // the component to re-render, with updated values.\n  useEffect(() => {\n    loadUsers(currentPage).then((result) => {\n      setTotalPages(result.total_pages);\n      setCurrentPage(result.page);\n      setUsers(result.data);\n    });\n  }, [currentPage]);\n\n  // Define a function to deal with a new page number being selected.\n  // The actual event that triggers this will happen in <PagingButton>\n  // but we'll define the logic on our side here.  When we get the new page,\n  // we update our `pages` state, copying over the existing values, but updating\n  // the current page to the new one.  Doing so will cause our effect above\n  // to re-run, since the value of pages.current will have updated.\n  const handlePageChange = (page) => setCurrentPage(page);\n\n  // This is the \"render\" part of our component.  We return the React Elements\n  // we want to use when representing our UI.  In reality, we \"render\" a tree\n  // of elements, returning a single root element.\n  return (\n    <div className=\"App\">\n      <PagingButton\n        current={currentPage}\n        total={totalPages}\n        onPageChange={handlePageChange}\n      />\n\n      <main className=\"profile-cards\">\n        <Profiles users={users} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// webpack extends import to allow us to load static assets that aren't JS\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}